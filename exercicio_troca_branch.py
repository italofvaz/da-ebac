# -*- coding: utf-8 -*-
"""Profissao Analista de dados M19 Exercicio.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ieuCTxJPl2qcD69itLgrXYPE3EdSF8aX

<img src="https://raw.githubusercontent.com/andre-marcos-perez/ebac-course-utils/main/media/logo/newebac_logo_black_half.png" alt="ebac-logo">

---

# **Módulo** | Análise de Dados: Controle de Versão III
Caderno de **Exercícios**<br>
Professor [André Perez](https://www.linkedin.com/in/andremarcosperez/)

---

# **Tópicos**

<ol type="1">
  <li>Sistema de branchs;</li>
  <li>Trabalhando com branchs;</li>
  <li>Mover código entre branchs.</li>
</ol>

---

# **Exercícios**

## 1\. Setup

Para realizar os exercicios vamos configurar o `git` e trazer o projeto do GitHub para a a máquina virtual do Google Colab (ou na sua máquina local, as instruções são as mesmas). Para tanto, replique as atividades expostas na aula 1 deste módulo.

### **1.1. Autenticação**

Nesta etapa, vamos configura o `git` com suas credenciais.
"""

import os

username = "italofvaz" # insira o seu nome de usuário do git
os.environ["GITHUB_USER"] = username

!git config --global user.name "${GITHUB_USER}"

import os
from getpass import getpass

usermail = getpass()
os.environ["GITHUB_MAIL"] = usermail

!git config --global user.email "${GITHUB_MAIL}"

import os
from getpass import getpass

usertoken = getpass()
os.environ["GITHUB_TOKEN"] = usertoken

"""### **1.2. Projeto**

Nesta etapa, vamos trazer o projeto do GitHub para máquina local.
"""

!git clone https://${GITHUB_USER}:${GITHUB_TOKEN}@github.com/italofvaz/da-ebac.git

# Commented out IPython magic to ensure Python compatibility.
# %cd /content/da-ebac/

"""---

## 2\. Preço da gasolina

O código abaixo gera um arquivo com o preço médio de venda da gasolina na cidade de São Paulo nos 10 primeiros dias de Julho de 2021.

> **Nota**: Este arquivo é o mesmo do exercício do módulo anterior.
"""

# Commented out IPython magic to ensure Python compatibility.
# %%writefile gasolina.csv
# dia,venda
# 1,5.11
# 2,4.99
# 3,5.02
# 4,5.21
# 5,5.07
# 6,5.09
# 7,5.13
# 8,5.12
# 9,4.94
# 10,5.03

"""### **2.1. Branch**

Crie uma branch chamada `develop` e aponte o context do `git` para a nova branch. Vamos simular uma atualização no exercício do módulo anterior.
"""

!git status

!git branch

!git checkout -b develop main

!git branch

"""### **2.2. Desenvolvimento**

Gere uma gráfico de linha utilizando os dados do arquivo `gasolina.csv` com o dia no eixo `x`
 e o seu preço no eixo `y` utilizando os pacotes Python de sua preferência, como o Pandas e o Seaborn. Salve o gráfico no arquivo `gasolina.png` e o seu código Python de geração no arquivo `gasolina.py`.

> **Nota**: Este gráfico deve alguns elementos diferente do anterior, como título, legenda, etc.
"""

import seaborn as sns
import pandas as pd

gasolina_df = pd.read_csv("gasolina.csv")

data = pd.DataFrame(gasolina_df[['dia', 'venda']])
grafico = sns.lineplot(data=data, x="dia", y="venda", marker='o', label='Crescimento')
grafico.set(title='Gasolina', xlabel='dias', ylabel='preco')

"""### **2.3. Git**

Utilizando os comandos do `git`, adicione e "commite" os arquivos gerados (base, código Python e gráfico) na branch `develop`.
"""

!git add .

!git commit -m " atualizacao do grafico com uma nova branch"

"""### **2.4. Github**

Utilizando os comandos do `git`, envie o seu commit para o GitHub.
"""

# comandos git para enviar o commit para o GitHub

"""### **2.5. Pull Request e Merge**

No GitHub, crie um *pull request* (PR) para enviar o código da branch de `develop` para a branch `main`. Ainda na plataforma online, confira as atualizações, aprove o PR e realize o *merge*.

---
"""